import logging

from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

logger = logging.getLogger(__name__)


class Builder:
    @staticmethod
    def create_keyboard(name_buttons: list | dict, *sizes: int) -> types.InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        if type(name_buttons) is list:
            for name_button in name_buttons:
                keyboard.button(
                    text=name_button, callback_data=name_button
                )
        elif type(name_buttons) is dict:
            for name_button in name_buttons:
                if "http" in name_buttons[name_button] or "@" in name_buttons[name_button]:
                    keyboard.button(
                        text=name_button, url=name_buttons[name_button]
                    )
                else:
                    keyboard.button(
                        text=name_button, callback_data=name_buttons[name_button]
                    )

        if len(sizes) == 0:
            sizes = (1,)
        keyboard.adjust(*sizes)
        return keyboard.as_markup(resize_keyboard=True, one_time_keyboard=True)

    @staticmethod
    def create_reply_keyboard(name_buttons: list, one_time_keyboard: bool = False, request_contact: bool = False,
                              *sizes) -> types.ReplyKeyboardMarkup:
        keyboard = ReplyKeyboardBuilder()
        for name_button in name_buttons:
            if name_button is not tuple:
                keyboard.button(
                    text=name_button,
                    request_contact=request_contact
                )
            else:
                keyboard.button(
                    text=name_button,
                    request_contact=request_contact

                )
        if len(sizes) == 0:
            sizes = (1,)
        keyboard.adjust(*sizes)
        return keyboard.as_markup(resize_keyboard=True, one_time_keyboard=one_time_keyboard)


class Keyboards:
    menu_kb = Builder.create_keyboard(
        {"–ó–∞–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å": "ask_question",
         "–†–µ–∫—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (—É—Ç–æ—á–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è)": "rectification",
         "–ë—Ä–∞–∫ –∏ –ª–∏—á–Ω–∞—è –∂–∏–∑–Ω—å": "marriage",
         "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—É–¥—å–±–∞": "financial_fate",
         "–ö–∞—Ä–º–∏—á–µ—Å–∫–∞–∏–µ –∑–∞–¥–∞—á–∏": "karmic_tasks",
         "–¢–∞–ª–∏—Å–º–∞–Ω—ã –∏ —Ü–∏—Ñ—Ä—ã": "talismans",
         "–ó–¥–æ—Ä–æ–≤—å–µ": "health",
         "–ñ–∏–ª—å—ë": "housing",
         "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è": "profession",
         "–ó–∞—á–∞—Ç–∏–µ –¥–µ—Ç–µ–π": "children_conception",
         "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": "investments",
         "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ": "psyc_health"},
        1, 1, 1, 1, 1, 1, 3, 2, 1
    )
    reply_menu_kb = Builder.create_reply_keyboard(
        ["üõç –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤", "üíå –¢–∏–ø —Ä–∞—Å—Å—ã–ª–æ–∫", "üõé –ü–æ–¥–¥–µ—Ä–∂–∫–∞"],
        True,
        False,
        1, 2, 1
    )
    question_button = {
        "1": "–ö–µ–º –º–Ω–µ –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å?",
        "2": "–ö–æ–≥–¥–∞ —è –≤—ã–π–¥—É –∑–∞–º—É–∂?",
        "3": "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å —Ç–∞–ª–∞–Ω—Ç—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏?",
        "4": "–ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–∞ –º–æ—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—É–¥—å–±–∞?",
        "5": "–ö–∞–∫ –º–Ω–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ?",
        "6": "–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –º–µ–Ω—è —Å–∞–º–æ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –¥–ª—è –∑–∞—á–∞—Ç–∏—è –∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–µ—Ç–µ–π?"}

    question_kb = Builder.create_keyboard(["1", "2", "3", "4", "5", "6"], 2, 2, 2)
#
