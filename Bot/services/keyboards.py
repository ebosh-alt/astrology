import itertools
import logging

from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from Bot.Data.config import LINK_SUPPORT
from Bot.entity.StateModels import MailingData
from Database import Profile, profiles

logger = logging.getLogger(__name__)


class Builder:
    @staticmethod
    def create_keyboard(name_buttons: list | dict, *sizes: int) -> types.InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()
        if type(name_buttons) is list:
            for name_button in name_buttons:
                keyboard.button(
                    text=name_button, callback_data=name_button
                )
        elif type(name_buttons) is dict:
            for name_button in name_buttons:
                if "http" in name_buttons[name_button] or "@" in name_buttons[name_button]:
                    keyboard.button(
                        text=name_button, url=name_buttons[name_button]
                    )
                else:
                    keyboard.button(
                        text=name_button, callback_data=name_buttons[name_button]
                    )

        if len(sizes) == 0:
            sizes = (1,)
        keyboard.adjust(*sizes)
        return keyboard.as_markup(resize_keyboard=True, one_time_keyboard=True)

    @staticmethod
    def create_reply_keyboard(name_buttons: list, one_time_keyboard: bool = False, request_contact: bool = False,
                              *sizes) -> types.ReplyKeyboardMarkup:
        keyboard = ReplyKeyboardBuilder()
        for name_button in name_buttons:
            if name_button is not tuple:
                keyboard.button(
                    text=name_button,
                    request_contact=request_contact
                )
            else:
                keyboard.button(
                    text=name_button,
                    request_contact=request_contact

                )
        if len(sizes) == 0:
            sizes = (1,)
        keyboard.adjust(*sizes)
        return keyboard.as_markup(resize_keyboard=True, one_time_keyboard=one_time_keyboard)


class Keyboards:
    menu_bt = {"–ó–∞–¥–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å": "ask_question",
               "–†–µ–∫—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (—É—Ç–æ—á–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è)": "rectification",
               "–ë—Ä–∞–∫ –∏ –ª–∏—á–Ω–∞—è –∂–∏–∑–Ω—å": "marriage",
               "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—É–¥—å–±–∞": "financial_fate",
               "–ö–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏": "karmic_tasks",
               "–¢–∞–ª–∏—Å–º–∞–Ω—ã –∏ —Ü–∏—Ñ—Ä—ã": "talismans",
               "–ó–¥–æ—Ä–æ–≤—å–µ": "health",
               "–ñ–∏–ª—å—ë": "housing",
               "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è": "profession",
               "–ó–∞—á–∞—Ç–∏–µ –¥–µ—Ç–µ–π": "children_conception",
               "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏": "investments",
               "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ": "psyc_health",
               "–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å": "numerological_compatibility"}
    menu_kb = Builder.create_keyboard(
        menu_bt,
        1, 1, 1, 1, 1, 1, 3, 2, 1, 1
    )
    reply_menu_kb = Builder.create_reply_keyboard(
        ["üõç –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤", "üíå –¢–∏–ø —Ä–∞—Å—Å—ã–ª–æ–∫", "üõé –ü–æ–¥–¥–µ—Ä–∂–∫–∞"],
        True,
        False,
        1, 2, 1
    )
    question_button = {
        "1": "–ö–µ–º –º–Ω–µ –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å?",
        "2": "–ö–æ–≥–¥–∞ —è –≤—ã–π–¥—É –∑–∞–º—É–∂?",
        "3": "–ö–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å —Ç–∞–ª–∞–Ω—Ç—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏?",
        "4": "–ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω–∞ –º–æ—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—É–¥—å–±–∞?",
        "5": "–ö–∞–∫ –º–Ω–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ?",
        "6": "–ö–∞–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –º–µ–Ω—è —Å–∞–º–æ–µ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–µ –¥–ª—è –∑–∞—á–∞—Ç–∏—è –∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥–µ—Ç–µ–π?"}

    question_kb = Builder.create_keyboard(["1", "2", "3", "4", "5", "6"], 2, 2, 2)
    payment_kb = Builder.create_keyboard({"–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏ –æ–ø–ª–∞—Ç–∏—Ç—å 970 —Ä—É–±": "filing_profile"})
    support_kb = Builder.create_keyboard({"–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏": LINK_SUPPORT})

    mailing_button = ["–û–Ω–ª–∞–π–Ω —ç—Ñ–∏—Ä", "–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é", "–í–∏–¥–µ–æ –æ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∞", "–û–±—É—á–∞—é—â–∏–µ —Å—Ç–∞—Ç—å–∏"]

    @staticmethod
    async def mailing_kb(state: FSMContext):
        buttons = {}
        enabled = "(–≤–∫–ª)"
        turned = "(–≤—ã–∫–ª)"
        data = await state.get_data()
        mailing: MailingData = data["mailing"]
        if mailing.online_broadcast:
            buttons[f"–û–Ω–ª–∞–π–Ω —ç—Ñ–∏—Ä {enabled}"] = f"–û–Ω–ª–∞–π–Ω —ç—Ñ–∏—Ä"
        else:
            buttons[f"–û–Ω–ª–∞–π–Ω —ç—Ñ–∏—Ä {turned}"] = f"–û–Ω–ª–∞–π–Ω —ç—Ñ–∏—Ä"

        if mailing.horoscope:
            buttons[f"–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é {enabled}"] = f"–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é"
        else:
            buttons[f"–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é {turned}"] = f"–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ –Ω–µ–¥–µ–ª—é"

        if mailing.video:
            buttons[f"–í–∏–¥–µ–æ –æ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∞ {enabled}"] = f"–í–∏–¥–µ–æ –æ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∞"
        else:
            buttons[f"–í–∏–¥–µ–æ –æ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∞ {turned}"] = f"–í–∏–¥–µ–æ –æ—Ç –∞—Å—Ç—Ä–æ–ª–æ–≥–∞"

        if mailing.articles:
            buttons[f"–û–±—É—á–∞—é—â–∏–µ —Å—Ç–∞—Ç—å–∏ {enabled}"] = f"–û–±—É—á–∞—é—â–∏–µ —Å—Ç–∞—Ç—å–∏"
        else:
            buttons[f"–û–±—É—á–∞—é—â–∏–µ —Å—Ç–∞—Ç—å–∏ {turned}"] = f"–û–±—É—á–∞—é—â–∏–µ —Å—Ç–∞—Ç—å–∏"
        return Builder.create_keyboard(buttons)

    ask_question_kb = Builder.create_keyboard(
        {
            "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ": "ask_question_free",
            "üí≥590—Ä 7 –¥–Ω–µ–π": "ask_question_590",
            "üí≥1000—Ä 1 –¥–µ–Ω—å": "ask_question_1000",
        }
    )

    rectification_time_buts = {
        "45": "2500",
        "2": "3500",
        "unknown": "5000",
    }
    rectification_choose_time = Builder.create_keyboard(
        {
            "–í—Ä–µ–º—è –∏–∑–≤–µ—Å—Ç–Ω–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ 45 –º–∏–Ω": "rectification_time_45",
            "–í—Ä–µ–º—è –∏–∑–≤–µ—Å—Ç–Ω–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ 2 —á–∞—Å–æ–≤": "rectification_time_2",
            "–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ –∏–ª–∏ >2 —á.": "rectification_time_unknown",
        }
    )

    @staticmethod
    def pay_keyboard(question_status: str):
        if question_status == "free":
            return None
        return Builder.create_keyboard(
            {f"üí≥{question_status}—Ä –Æ–∫–∞—Å—Å–∞": f"payment_ykassa_{question_status}",
             f"üí≥{question_status}—Ä PayPal": f"payment_paypal_{question_status}",
             f"üí≥{question_status}—Ä Stripe": f"payment_stripe_{question_status}",
             }

        )

    @staticmethod
    async def get_profiles_kb(user_id: int):
        pr_list = await profiles.get_by_user(user_id=user_id)
        kb_profiles_dict = {}
        for pr in pr_list:
            kb_profiles_dict[f"{pr.name} {pr.birth_data}"] = f"questionnare_{pr.id}"
        kb_profiles_dict["–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞"] = "questionnare_new"
        return Builder.create_keyboard(kb_profiles_dict)

    questionnare_setted_kb = Builder.create_keyboard(["–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"])

    profile_setted_kb = Builder.create_keyboard({"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å": "complete_profile"})

    @staticmethod
    async def get_profiles_keyboard(user_id: int):
        pr_list = await profiles.get_by_user(user_id=user_id)
        kb_profiles_dict = {}
        for pr in pr_list:
            kb_profiles_dict[f"{pr.name} {pr.birth_data}"] = f"profile_{pr.id}"
        kb_profiles_dict["–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞"] = "profile_new"
        return Builder.create_keyboard(kb_profiles_dict)
